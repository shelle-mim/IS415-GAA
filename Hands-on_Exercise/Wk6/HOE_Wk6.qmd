---
title: "Hands-On Exercise 6: Spatial Weights & Applications"
date: "13 Feb 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

::: callout-caution
This Hands-On Exercise is based spdep rather than sf.

For In-Class Ex and Take Home Ex will use sfdep. This will cut down conversion form sf to sp (that we had in TH Ex1).
:::

# Imports

## Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Data

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
# Relational join
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# Visualise Regional Development Indicator

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Computing Contiguity Spatial Weights

## Computing contiguity based neighbours

### Queen

```{r}
# Computer Queen contiguity weight matrix
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

```{r}
# Lists all neighbouring polygons 
wm_q
```

```{r}
# List neighbours of first polygon
wm_q[[1]]
```

```{r}
# Retrieve county name of polygon 1
hunan$County[1]
```

```{r}
# Reveal county names of Anxiangs's 5 neighbours
hunan$NAME_3[c(2,3,4,57,85)]
```

```{r}
# Retrieve GDPCC of these 5 counties
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

```{r}
# Display complete weight of matrix using str()
str(wm_q)
```

### Rook

```{r}
wm_r <- poly2nb(hunan, queen=FALSE) # just add a queen=FALSE, is queen=TRUE by default
summary(wm_r)
```

## Visualising contiguity weights

### Get coordinates of polygons

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])

# Combine lat and long with cbind
coords <- cbind(longitude, latitude)
head(coords)
```

### Plot QUeen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plot Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plot both

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

# Computing distance based neighbours

## Determine cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

```{r}
# Compute fixed dist weight matrix
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
# Display content of matrix
str(wm_d62)
```

```{r}
# Display in table
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

## Plot fixed dist weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

## Compute adaptive dist weight matrix

```{r}
# Control num of neighbours using k-nearest neighbours
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
# Display content
str(knn6)
```

```{r}
# Plot
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Weights based on in Inversed Distance (IDW)

## Compute distances

```{r}
# Compute using nbdists() of spdep
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardised weights matrix

```{r}
# Assign weights to neighboring polygons
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

```{r}
# See weight of first polygon's eight neighbours type
rswm_q$weights[10]
```

```{r}
# row standardised dist weight matrix
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# Application of Spatial Weight Matrix

Types of spatial lagged variables:

-   spatial lag with row-standardised weights

-   spatial lag as a sum of neighbouring values

-   spatial window average

-   spatial window sum

## Spatial Lag with row-standardised weights

(Compute ave neighbor GDPCC values for each polygon)

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
# Retrieve GDPPC of 5 countries (done earlier)
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

```{r}
# Append spatially lag GDPPC values
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

```{r}
# Plot
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Spatial lag as a sum of neighbouring values

(Sum neighboring values by assigning binary weights)

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
# Compute a lag var from weight and GDPPC
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

```{r}
hunan <- left_join(hunan, lag.res)

gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Spatial window average

(Uses row-standardized weights + includes diagonal element)

```{r}
# Add diagonal element
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

```{r}
# Obtain weights
wm_qs <- nb2listw(wm_qs)
wm_qs
```

```{r}
# Compute the lag variable
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

```{r}
# Convert lag varioable obj into dataframe
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
# Append
hunan <- left_join(hunan, lag_wm_qs.res)
```

```{r}
# compare vals of lag and spatial window ave
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

```{r}
# Plot for comparison
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## Spatial window sum

(window ave, but without row-standardized weights)

```{r}
# Add diagonal element
wm_qs <- include.self(wm_q)
wm_qs
```

```{r}
# Assign binary weights
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

```{r}
# Assign weight values
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
# Compute lag variable
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

```{r}
# Convert to dataframe
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
# Append
hunan <- left_join(hunan, w_sum_gdppc.res)
```

```{r}
# Compare
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

```{r}
# Plot comparison
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
