---
title: "In-Class Exercise 4: Spatial Point Patterns Analysis"
subtitle: "Alt: Hands-On Exercise 4 & 5 - Spatial Point Patterns Analysis"
date: "29 Jan 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

## Import Relevant Packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

## Spatial Data Wrangling

```{r}
# Import childcare spatial data
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
# Import coastal spatial data
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
# Import ura spatial data
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### Assign correct CRS

```{r}
sg_sf <- st_transform(sg_sf, 3414)
st_geometry(sg_sf)
```

```{r}
mpsz_sf <- st_transform(mpsz_sf, 3414)
st_geometry(mpsz_sf)
```

```{r}
st_geometry(childcare_sf)
```

All data is now in SVY21.

## Mapping

```{r}
# Static map of chilcares
tmap_mode("plot")
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots(size = 0.002)
```

```{r}
# Interactive Map
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

## Geospatial Data Wrangling

```{r}
# Convert sf data to sp spatial class
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
# Display info
list(childcare)
list(mpsz)
list(sg)
```

```{r}
# Convert to generic sp object
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

```{r}
# convert to spatstat's ppp format
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
# statistics
summary(childcare_ppp)
```

```{r}
# check for duplicated points (warning also appears in summary)
any(duplicated(childcare_ppp))
```

```{r}
# find number of duiplicated points
# multiplicity() shows all points
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
# observe duplicated points (higher opacity spots on the map)
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

### Methods of Removing duplicate points

#1: Delete duplicated points =\> but removes useful data

```{r}
#2: Jittering: add small perturbation so duplicate points are not in same place
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

#3: Make each point unique, then attached duplicates as marks (attributes of the points) =\> needs analytical techniques to take into account marks

### Creating owin object

Used to create a geographical area to confine analysis within

```{r}
sg_owin <- as(sg_sp, "owin")
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

```{r}
# Combining point events with owin
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

# First-Order Spatial Point Pattern Analysis

## Kernel Density Estimation

```{r}
# bw.diggle = automatic bandwith selection. can also use bw.CvL(), bw.scott(), bw.ppl()
# kernel = smooting kernel/selected smoothing method (others: epanechnikov, quartic, disc)
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)
```

```{r}
# Retrieve the bandwith used to computer kde layer
bw <- bw.diggle(childcareSG_ppp)
bw
```

```{r}
# Rescaling KDE values (convert unit of measurement)
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Other bandwidth calc methods:

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

```{r}
# Compare outputs of bw.diggle vs bw.ppl
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

```{r}
# Different kernel methods
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## Fixed & Adaptive KDE

```{r}
# Compute KDE with bw of 600m (sigma=0.6)
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

```{r}
# KDE with adaptive bandwith
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

```{r}
# Compared fixed vs adaptive
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

```{r}
# KDE output into grid
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

```{r}
# grid to raster
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
```

```{r}
kde_childcareSG_bw_raster
```

```{r}
# include crs info into raster
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

```{r}
# visualise output
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### Comparing spatial point patterns using KDE

```{r}
# Extract areas for analysis
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

```{r}
# plot
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

```{r}
# convert to sp
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

```{r}
# convert to owin
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

```{r}
# extract childcare in regions
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

```{r}
# rescale to transform unit of measurement
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

```{r}
# Plot
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

```{r}
# computer KDE
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

```{r}
# compute fixed bandwith KDE
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## Nearest Neighbour Analysis

```{r}
# Clark-Evans test of aggregation
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

```{r}
# C-E test for CCK
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

```{r}
# C-E test for Tamp
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

# Second-Order Spatial Point Pattern Analysis

## G Function

```{r}
# Compute G-function using Gest() 
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

```{r}
# Monte Carlo test with G-function
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

```{r}
# Compute G-func for Tamp
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
# Monte-Carole Test: Hypo test for random distribution in Tamp (H0=rand, H1=not rand)
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

## F Function

```{r}
# Compute F-func on CCK
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

```{r}
# Monte-Carole Test: Hypo testing for randomness (H0=rand, H1=not rand)
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
# Plot results => lies within envelope, so can conclude is random (H0)
plot(F_CK.csr)
```
