---
title: "In-Class Exercise 11: Spatial Interaction Models"
date: "27 Mar 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

# Aim & Description

Look at flow of people from one planning subzone to another -\> will need to convert location from the bus stop level to the subzone level.

Will be using data from LTA Datamall API

# Imports

## Packages

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)
```

## Data

```{r}
# Import OD data
odbus <- read.csv("data/aspatial/origin_destination_bus_202210.csv")
```

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)

mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

```{r}
pop <- pop %>% 
  left_join(mpsz, by = c("PA" = "PLN_AREA_N", "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ, SZ = SUBZONE_C)
```

# Data Wrangling

## Transforming

Since our origin and dest codes are numerical, change to factor (numerical + ordering, so there it is ordinal)

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

## Extracting study data

Extract only the weekday data during peak hours.

```{r}
odbus7_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <=9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Now we can write out to RDS.

```{r}
# write_rds(odbus7_9, "data/rds/odbus7_9.rds")
odbus7_9 <- read_rds("data/rds/odbus7_9.rds")
```

## Combine bus stop data with MPSZ

So we can get the subzone each bus stop is in.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>% 
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

However, we can see there are fewer data points in busstop_mpsz than our busstop dataset. This is because these 5 bus stops are on the causeway / in JB, and lie outside Singapore.

Now, we can append the subzone code to out odbus7_9 df

```{r}
od_data <- left_join(odbus7_9, busstop_mpsz, by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

## Check for duplicate

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- left_join(od_data, busstop_mpsz, by = c("DESTIN_BS" = "BUS_STOP_N")) %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na()
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()

od_data <- unique(od_data)
```

```{r}
# write_rds(od_data, "data/rds/od_data.rds")
od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising the Data

```{r}
tmap_mode("view")
qtm(mpsz) + tmap_options(check.and.fix = TRUE)
```

# Computing Distance Matrix

```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
head(mpsz,10)
```

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

Use centroid of polygons to construct O/D matrix

```{r}
dist <- spDists(mpsz_sp)
dist
```

Note: diagonal is zero.

Our col and row names are now numbers so we need to create list of names and sort, before putting it onto the matrix col and rows.

```{r}
# Create list
sz_names <- mpsz$SUBZONE_C
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

## Pivoting distance value by Subzone_C

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

## Updating intra-zonal distances

```{r}
# Done on memory to check if metrics are correct
distPair %>%
  filter(dist > 0) %>%
  summary()
```

Artificially assign value of 50 to those with value 0 so we can do calculation.

(Why 50? look at max and min values in distPair calc just now, 50 meters is less than the min distance, and much much less than the max val.)

```{r}
distPair$dist <- ifelse(distPair$dist ==0,
                        50, distPair$dist)
```

```{r}
distPair <- distPair %>%
  rename(orig = Var1, dest = Var2)
```

# Preparing Flow Data

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarize(TRIPS = sum(TRIPS))
```

```{r}
flow_data1 <- flow_data %>%
  left_join(distPair, by = c("ORIGIN_SZ" = "orig", "DESTIN_SZ" = "dest"))
```

```{r}
# update with pop data
flow_data1 <- flow_data1 %>%
  left_join(pop, by=c("ORIGIN_SZ" = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop, by=c("DESTIN_SZ" = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```
