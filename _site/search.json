[
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "",
    "text": "In this exercise, we investigate the distribution and availability of Water Points and access to clean water in the state of Osun, Nigeria. This will be done through the application of various Spatial Point Pattern Analyses in order to discover the geographical distribution of functional and non-functional Water Points in Osun.\nIn this exercise, we will be using data from the global Water Point Data Exchange (WPdx) project."
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#install-relevant-packages",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#install-relevant-packages",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Install Relevant Packages",
    "text": "Install Relevant Packages\nFor this exercise, we will be using the following packages:\n\nsf for importing, managing, and processing geospatial data\ntidyverse for performing data science tasks such as importing, wrangling and visualising data\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps\nmaptools which provides a set of tools for manipulating geographic data\nraster which reads, writes, manipulates, analyses and model of gridded spatial data\nspatstat, for its wide range of useful functions for point pattern analysis, and\nsfdep for performing geospatial data wrangling and local colocation quotient analysis\n\n\npacman::p_load(sf, tidyverse, tmap, maptools, raster, spatstat, sfdep)"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#import-geospatial-data",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#import-geospatial-data",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Import Geospatial Data",
    "text": "Import Geospatial Data\n\nGeoBoundaries data set\n\ngeoNGA = st_read(dsn = \"data/geospatial\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Take-home_Exercise/TH1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nhead(geoNGA, n=3)\n\nSimple feature collection with 3 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 538408.1 ymin: 116360.7 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n  shapeName Level                    shapeID shapeGroup shapeType\n1 Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2 Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3    Abadam  ADM2 NGA-ADM2-72505758B57073987        NGA      ADM2\n                        geometry\n1 MULTIPOLYGON (((548795.5 11...\n2 MULTIPOLYGON (((541412.3 12...\n3 MULTIPOLYGON (((1248985 104...\n\n\n\n\nNGA data set\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2\") %>%\n  st_transform(crs = 26392) # transform to PCS of Nigeria\n\nReading layer `nga_admbnda_adm2' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Take-home_Exercise/TH1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nhead(NGA, n=3)\n\nSimple feature collection with 3 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 538408.1 ymin: 116360.7 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n  Shape_Leng  Shape_Area   ADM2_EN ADM2_PCODE  ADM2_REF ADM2ALT1EN ADM2ALT2EN\n1  0.2370744 0.001523921 Aba North   NG001001 Aba North       <NA>       <NA>\n2  0.2624772 0.003531104 Aba South   NG001002 Aba South       <NA>       <NA>\n3  3.0753158 0.326867840    Abadam   NG008001    Abadam       <NA>       <NA>\n  ADM1_EN ADM1_PCODE ADM0_EN ADM0_PCODE       date    validOn validTo\n1    Abia      NG001 Nigeria         NG 2016-11-29 2019-04-17    <NA>\n2    Abia      NG001 Nigeria         NG 2016-11-29 2019-04-17    <NA>\n3   Borno      NG008 Nigeria         NG 2016-11-29 2019-04-17    <NA>\n        SD_EN SD_PCODE                       geometry\n1  Abia South  NG00103 MULTIPOLYGON (((548795.5 11...\n2  Abia South  NG00103 MULTIPOLYGON (((547286.1 11...\n3 Borno North  NG00802 MULTIPOLYGON (((1248985 104..."
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#import-aspatial-data",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#import-aspatial-data",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Import Aspatial Data",
    "text": "Import Aspatial Data\n\nwp_nga <- read_csv(\"data/aspatial/WPDEx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\") #remove irrelavent data, keep the data small"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#convert-aspatial-to-geospatial",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#convert-aspatial-to-geospatial",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Convert Aspatial to Geospatial",
    "text": "Convert Aspatial to Geospatial\n\n# use log and lat to make georeference col\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nhead(wp_nga)\n\n# A tibble: 6 × 71\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 429068 GRID3      7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n2 222071 Federa…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan… Mechan…\n3 160612 WaterA…    6.49    7.93 12/04/… Yes     Boreho… Well    Hand P… Hand P…\n4 160669 WaterA…    6.73    7.65 12/04/… Yes     Boreho… Well    <NA>    <NA>   \n5 160642 WaterA…    6.78    7.66 12/04/… Yes     Boreho… Well    Hand P… Hand P…\n6 160628 WaterA…    6.96    7.78 12/04/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 61 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#projection-transformation",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#projection-transformation",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Projection Transformation",
    "text": "Projection Transformation\n\n# Transform to appropriate projected coordinate system of Nigeria\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#data-cleaning",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#data-cleaning",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\nSelect relevant cols\n\n# Select relevant adm1 and adm2 cols (cols 3-4 and 8-9)\nNGA <- NGA %>%\n  dplyr::select(c(3:4, 8:9))\n\n\n\nCheck for and Remove Duplicate Names\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n\n# Save duplicated LGA names\nduplicated_LGA <- NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n# Find the indices of the duplicated LGAs\nduplicated_indices <- which(NGA$ADM2_EN %in% duplicated_LGA)\n\n# Edit names in at indices with duplicated names\nfor (ind in duplicated_indices) {\n  NGA$ADM2_EN[ind] <- paste(NGA$ADM2_EN[ind], NGA$ADM1_EN[ind], sep=\", \")\n}"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#data-wrangling",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#data-wrangling",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nOrganise Water Point status tags into broader “Functional”, “Non-Functional” and “Unknown” categories\n\n# Look at different tags\nunique(wp_sf$'#status_clean')\n\n[1] NA                                 \"Functional\"                      \n[3] \"Abandoned/Decommissioned\"         \"Non-Functional\"                  \n[5] \"Functional but not in use\"        \"Functional but needs repair\"     \n[7] \"Abandoned\"                        \"Non functional due to dry season\"\n[9] \"Non-Functional due to dry season\"\n\n\n\n# Rename #status_clean and remove NA values\nwp_sf_nga <- wp_sf %>%\n  rename(status_clean = '#status_clean') %>%\n  dplyr::select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"\n  ))\n\n\nwp_functional_sf <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nwp_nonfunctional_sf <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nwp_unknown_sf <- wp_sf_nga %>% filter(`status_clean` %in% \n                                     c(\"unknown\"))\n\n\nglimpse(NGA)\n\nRows: 774\nColumns: 5\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((548795.5 11..., MULTIPOLYGON (…\n\n\n\n\nExtract Osun data\n\nosun <- NGA %>%\n  filter(ADM1_EN %in%\n           c(\"Osun\"))\nqtm(osun)"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#derive-kernel-density-maps",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#derive-kernel-density-maps",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Derive Kernel Density Maps",
    "text": "Derive Kernel Density Maps\n\nConversion to ppp data type\nBefore plotting our Kernel Density Maps, we first need to convert our data into the appropriate ppp data type.\n\n# Convert sf to sp's spatial class\nwp_functional_spatial <- as_Spatial(wp_functional_sf)\nwp_nonfunctional_spatial <- as_Spatial(wp_nonfunctional_sf)\nosun_spatial <- as_Spatial(osun)\n\n\n# Check spatial data type\nwp_functional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 52148 \nextent      : 29322.63, 1218553, 33758.37, 1092629  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\n\n\nwp_nonfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 32204 \nextent      : 28907.91, 1209690, 33736.93, 1092883  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :                     status_clean \nmin values  :                        Abandoned \nmax values  : Non-Functional due to dry season \n\n\n\nosun_spatial\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\n\n# Convert to sp\nwp_functional_sp <- as(wp_functional_spatial, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\nosun_sp <- as(osun_spatial, \"SpatialPolygons\")\n\n\nwp_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 52148 \nextent      : 29322.63, 1218553, 33758.37, 1092629  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\n\n\nWP_Functional_pppWP_NonFunctional_ppp\n\n\n\nplot(wp_functional_ppp)\n\n\n\n\n\n\n\nplot(wp_nonfunctional_ppp)\n\n\n\n\n\n\n\n\n\nCheck for/Deal with duplicated points\n\nany(duplicated(wp_functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp))\n\n[1] FALSE\n\n\nSince there are no duplicated points, no further processing is needed.\n\n\nCreate Owin of Osun\nNext, we create an owin object of Osun in order to bound our data within when representing our data on the map.\n\nosun_owin <- as(osun_sp, \"owin\")\n\n\nplot(osun_owin)\n\n\n\n\nWe can now use this owin of Osun to plot our Functional and Non-functional water point event data within.\n\nwp_functional_osun_ppp = wp_functional_ppp[osun_owin]\nwp_nonfunctional_osun_ppp = wp_nonfunctional_ppp[osun_owin]\n\n\nplot(wp_functional_osun_ppp)\n\n\n\n\n\nplot(wp_nonfunctional_osun_ppp)\n\n\n\n\n\n\nKernel Density Estimation\nWith our data of Osun functional and non-functional water points assembled, we can now proceed to Kernel Density Estimation.\n\n# Convert data to km as our unit of measurement\nwp_func_osun_ppp_km <- rescale(wp_functional_osun_ppp, 1000, \"km\")\nwp_nonfunc_osun_ppp_km <- rescale(wp_nonfunctional_osun_ppp, 1000, \"km\")\n\nFor Kernel Density Estimation, there are multiple method in determining the bandwidth with which the calculation will be performed with. Below, we experiment with various automatic bandwith methods:\n\n# Choosing automatic bandwith method\npar(mfrow=c(2,2))\nplot(density(wp_func_osun_ppp_km,\n             sigma=bw.CvL,\n             edge=TRUE,\n             kernel=\"gaussian\"))\nplot(density(wp_func_osun_ppp_km,\n             sigma=bw.scott,\n             edge=TRUE,\n             kernel=\"gaussian\"))\nplot(density(wp_func_osun_ppp_km,\n             sigma=bw.diggle,\n             edge=TRUE,\n             kernel=\"gaussian\"))\nplot(density(wp_func_osun_ppp_km,\n             sigma=bw.ppl,\n             edge=TRUE,\n             kernel=\"gaussian\"))\n\n\n\n\nFrom these maps, I have choosen the bw.ppl method to be used. This is as from the visualisations we can see we appear to be working with predominately tight clusters, and bw.ppl and bw.diggle give more appropriate values when such is the case. I chose bw.ppl over bw.diggle as it shows up better than bw.diggle, which is slightly difficult to see in the visualisation above.\nNow, we will choose our kernel method. The different kernel methods are demonstrated below:\n\n# Choosing kernel method\npar(mfrow=c(2,2))\nplot(density(wp_func_osun_ppp_km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(wp_func_osun_ppp_km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(wp_func_osun_ppp_km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(wp_func_osun_ppp_km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\nSince there are no significant differences observed across different kernels, we will use the Gaussian kernel, the default kernel method.\nLastly, to cover all bases, we shall try some adaptive bandwidth methods. Such methods are said to be better adapted to deal with skewed distributions of data.\n\npar(mfrow=c(1,2))\n# Try adaptive bandwith\nplot( adaptive.density(wp_func_osun_ppp_km, method=\"voronoi\"))\nplot( adaptive.density(wp_func_osun_ppp_km, method=\"kernel\"))\n\n\n\n\nAs we can see, adaptive bandwidth also does not give the best visualisations, so will stick to using the automatic bandwidth method, with bw.ppl and Gaussian kernel.\nHence, there are our final parameters of our Kernel Density Estimates will be as shown below:\n\nkde_wp_func_bw_ppl <- density(wp_func_osun_ppp_km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\nkde_wp_nonfunc_bw_ppl <- density(wp_nonfunc_osun_ppp_km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\n\n\n\nFinal Kernel Density Estimation Maps\nAnd finally, we shall plot our Kernel Density Maps.\n\npar(mfrow=c(1,2))\nplot(kde_wp_func_bw_ppl)\nplot(kde_wp_nonfunc_bw_ppl)"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#display-kde-maps-on-openstreetmap",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#display-kde-maps-on-openstreetmap",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Display KDE Maps on OpenStreetMap",
    "text": "Display KDE Maps on OpenStreetMap\n\nConvert to raster for tmap display\nIn order to display our KDE Maps on tmap, we would need to first convert out KDE Map to raster format.\n\n# Convert to Gridded, then to raster\ngridded_kde_wp_func_bw_ppl <- as.SpatialGridDataFrame.im(kde_wp_func_bw_ppl)\ngridded_kde_wp_nonfunc_bw_ppl <- as.SpatialGridDataFrame.im(kde_wp_nonfunc_bw_ppl)\n\nraster_kde_wp_func_bw_ppl <- raster(gridded_kde_wp_func_bw_ppl)\nraster_kde_wp_nonfunc_bw_ppl <- raster(gridded_kde_wp_nonfunc_bw_ppl)\n\n# Assign CRS info\nprojection(raster_kde_wp_func_bw_ppl) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(raster_kde_wp_nonfunc_bw_ppl) <- CRS(\"+init=EPSG:26392 +units=km\")\n\n\n\nDisplay on tmap OpenStreetMap\nNow that we have completed the transformation, we can display our maps on OpenStreetMap using tmap.\n\nKDE of Functional Water PointsKDE of Non-Functional Water Points\n\n\n\ntmap_mode('view')\n\nkde_func_wp <- tm_basemap(\"OpenStreetMap\")+\n  tm_view(set.zoom.limits=c(9, 16)) +\n  tm_shape(raster_kde_wp_func_bw_ppl) + \n  tm_raster(\"v\", palette=\"YlOrRd\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nkde_func_wp\n\n\n\n\n\n\n\n\nkde_nonfunc_wp <- tm_basemap(\"OpenStreetMap\")+\n  tm_view(set.zoom.limits=c(9, 16)) +\n  tm_shape(raster_kde_wp_nonfunc_bw_ppl) + \n  tm_raster(\"v\", palette=\"YlOrRd\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nkde_nonfunc_wp"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#describe-spatial-patterns",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#describe-spatial-patterns",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Describe Spatial Patterns",
    "text": "Describe Spatial Patterns\nAdding the LGA borders back on top of our KDE maps, we get:\n\nFunctional Water PointsNon-Functional Water Points\n\n\n\ntmap_mode('plot')\nkde_func_wp +\n  tm_shape(osun) +\n  tm_borders() +\n  tm_text(\"ADM2_EN\", size = 0.6) \n\n\n\n\n\n\n\nkde_nonfunc_wp + \n  tm_shape(osun) +\n  tm_borders() +\n  tm_text(\"ADM2_EN\", size = 0.6) \n\n\n\n\n\n\n\n\nBenefit of Kernel Density Maps as a representation tool\nAs we can see from the two maps, it is very easy to pick out the areas with high density of water points in comparison to to point maps or choropleth maps. This is as the Kernel Density Estimate provides quantitative values of the concentration of points at a specific point, allowing for clean, uncluttered, and specific.\nKernel Density estimates also calculates the density of each area, allowing for a smoother estimate, and hence a better representation of the distribution of events on a map.\n\n\nSpatial Pattern Analysis\nFrom the plotted Kernel Density Maps, we can see there is a relatively high density of functional water points in the following LGAs, as denoted by the bright/dark red colors observed in the map:\n\nEjigbo\nEde North\nOsogbo, and\nIwo\n\nOn the other hand, for non-functional water points in Osun, the high density lies primarily between the LGAs:\n\nIfe Central, and\nIfe East\n\nWe will do further analysis on some of these LGAs of interest in the next section."
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#formulate-null-hypothesis",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#formulate-null-hypothesis",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Formulate Null Hypothesis",
    "text": "Formulate Null Hypothesis\nBefore carrying out our Second-order analysis on selected LGAs, we must first formulate our hypotheses to test our data against.\nAs such, below are the null and alternate hypotheses for the analysis on functional / non-functional water points respectively:\n\nH0: The distribution of functional / nonfunctional water points in the given study area are randomly distributed.\nH1: The distribution of functional / nonfunctional water points in the given study area are not randomly distributed.\nConfidence level : 95%\nSignificance level (alpha) : 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05."
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#perform-test-using-g-function",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#perform-test-using-g-function",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Perform test using G Function",
    "text": "Perform test using G Function\n\nExtracting Study Areas\nWill be using the 2 most notable LGAs for Functional and Nonfunctional water points, which are:\n\nFor Functional: Ejigbo and Ede North\nFor Non-Functional: Ife Central and Ife East\n\nWe must now extract these 4 LGAs as owins, then populate them with the relavent Water Point data.\n\n# Study Areas for Functional Water Points\nejigbo_owin <- NGA[NGA$ADM2_EN == \"Ejigbo\",] %>%\n    as('Spatial') %>%\n    as('SpatialPolygons') %>%\n    as('owin')\n\nede_north_owin <- NGA[NGA$ADM2_EN == \"Ede North\",] %>%\n    as('Spatial') %>%\n    as('SpatialPolygons') %>%\n    as('owin')\n\n# Study Areas for NonFunctional Water Points\nife_central_owin <- NGA[NGA$ADM2_EN == \"Ife Central\",] %>%\n    as('Spatial') %>%\n    as('SpatialPolygons') %>%\n    as('owin')\n\nife_east_owin <- NGA[NGA$ADM2_EN == \"Ife East\",] %>%\n    as('Spatial') %>%\n    as('SpatialPolygons') %>%\n    as('owin')\n\n\nejigbo_wp_func_ppp = rescale(wp_functional_ppp[ejigbo_owin], 1000, \"km\")\nede_north_wp_func_ppp = rescale(wp_functional_ppp[ede_north_owin], 1000, \"km\")\nife_central_wp_nonfunc_ppp = rescale(wp_nonfunctional_ppp[ife_central_owin], 1000, \"km\")\nife_east_wp_nonfunc_ppp = rescale(wp_nonfunctional_ppp[ife_east_owin], 1000, \"km\")\n\n\npar(mfrow=c(2,2))\nplot(ejigbo_wp_func_ppp)\nplot(ede_north_wp_func_ppp)\nplot(ife_central_wp_nonfunc_ppp)\nplot(ife_east_wp_nonfunc_ppp)\n\n\n\n\n\n\nCalculating G Function\nIn this analysis, we will be using G Function in order to analyse the spatial distribution of water points in these 4 LGAs. The G function was chosen for this case as we are performing analysis on segments of our study area rather than the study area as a cumulative.\n\nEjigbo (functional water points)Ede North (functional water points)Ife Central (non-functional water points)Ife East (non-functional water points)\n\n\n\nG_ejigbo = Gest(ejigbo_wp_func_ppp, correction = \"border\")\nplot(G_ejigbo)\n\n\n\n\n\nG_ejigbo.csr <- envelope(ejigbo_wp_func_ppp, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\nplot(G_ejigbo.csr)\n\n\n\n\n\n\n\nG_ede_north = Gest(ede_north_wp_func_ppp, correction = \"border\")\nplot(G_ede_north)\n\n\n\n\n\nG_ede_north.csr <- envelope(ede_north_wp_func_ppp, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\nplot(G_ede_north.csr)\n\n\n\n\n\n\n\nG_ife_central = Gest(ife_central_wp_nonfunc_ppp, correction = \"border\")\nplot(G_ife_central)\n\n\n\n\n\nG_ife_central.csr <- envelope(ife_central_wp_nonfunc_ppp, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\nplot(G_ife_central.csr)\n\n\n\n\n\n\n\nG_ife_east = Gest(ife_east_wp_nonfunc_ppp, correction = \"border\")\nplot(G_ife_east)\n\n\n\n\n\nG_ife_east.csr <- envelope(ife_east_wp_nonfunc_ppp, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\nplot(G_ife_east.csr)"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#second-order-analysis-conclusion",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#second-order-analysis-conclusion",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Second-Order Analysis Conclusion",
    "text": "Second-Order Analysis Conclusion\nFrom the graphs drawn, we can draw the following conclusions:\nEjigbo: The observed G(r) lies above the envelope at all plotted values of r, indicating that the Functional Water Points in Ejigbo are clustered. We can therefore reject the null hypothesis, and conclude that the Functional Water Points in Ejigbo are clustered with 95% confidence.\nEde North: Similarly, the observed G(r) lies above the envelope at all plotted values of r, indicating that the Functional Water Points in Ede North are clustered. We can therefore reject the null hypothesis, and conclude that the Functional Water Points in Ede North are clustered with 95% confidence.\nIfe Central: Likewise, the observed G(r) lies above the envelope at all plotted values of r, indicating that the Non-Functional Water Points in Ife Central are clustered. We can therefore reject the null hypothesis, and conclude that the Non-Functional Water Points in Ife Central are clustered with 95% confidence.\nIfe East: Lastly, we have Ife East, where the observed G(r) lies above the envelope, except at r > 0.925km (approximately). This indicates that the Non-Functional Water Points in Ife Central are clustered at values of r below 0.925km, and therefore for these values we can reject the null hypothesis, and conclude that the Non-Functional Water Points in Ife East at r < 0.925km are clustered with 95% confidence."
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#formulate-null-hypothesis-and-alternative-hypothesis",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#formulate-null-hypothesis-and-alternative-hypothesis",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Formulate Null Hypothesis and Alternative Hypothesis",
    "text": "Formulate Null Hypothesis and Alternative Hypothesis\nMoving on to Spatial Correlation Analysis of Functional and Non-Functional Water Points in Osun, we will be testing the hypotheses as shown below:\n\nH0: The Functional Water Points in Osun are not co-located with the Non-Functional Water Points in Osun.\nH1: The Functional Water Points in Osun are co-located with the Non-Functional Water Points in Osun.\nConfidence level : 95%\nSignificance level (alpha) : 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05."
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#perform-local-colocation-quotient-analysis",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#perform-local-colocation-quotient-analysis",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Perform Local Colocation Quotient Analysis",
    "text": "Perform Local Colocation Quotient Analysis\n\nProprocessing to Osun data\nIn order to carry out our co-location analysis, we first need to assemble the relevant Osun Functional and Non-Functional Water point data.\n\n# Re-select wp sf data\nwp_sf_osun <- wp_sf %>%\n  st_intersection(osun) %>%\n  rename(status_clean = 'X.status_clean') %>%\n  rename(country_name = 'X.clean_country_name') %>%\n  rename(adm1 = 'X.clean_adm1') %>%\n  dplyr::select(status_clean, country_name, adm1) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"\n  ))\n\n# Filter out non-osun data\nwp_sf_osun <- wp_sf_osun %>% filter(adm1 %in%\n           c(\"Osun\"))\n\n# Create col to catagorise functional and non functional water points\nwp_sf_osun <- wp_sf_osun %>%\n  mutate(`func_status` = case_when(\n    `status_clean` %in% c(\"Functional\", \n                          \"Functional but not in use\",\n                          \"Functional but needs repair\") ~ \n      \"Functional\",\n    `status_clean` %in% c(\"Abandoned/Decommissioned\",\n                               \"Non-Functional due to dry season\",\n                               \"Non-Functional\",\n                               \"Abandoned\",\n                               \"Non functional due to dry season\") ~ \n      \"Non-Functional\",\n    `status_clean` == \"Unknown\" ~ \"Unknown\"))\n\nglimpse(wp_sf_osun)\n\nRows: 5,322\nColumns: 5\n$ status_clean <chr> \"Functional but needs repair\", \"Functional\", \"Functional\"…\n$ country_name <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"N…\n$ adm1         <chr> \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"…\n$ Geometry     <POINT [m]> POINT (212810 386707.6), POINT (212202 349210.1), P…\n$ func_status  <chr> \"Functional\", \"Functional\", \"Functional\", \"Functional\", \"…\n\n\nWe can now plot the processed data to visualise the sf data we will be working with:\n\ntmap_mode(\"view\")\ntm_shape(osun) +\n  tm_polygons() +\ntm_shape(wp_sf_osun)+ \n  tm_dots(col = \"func_status\",\n             size = 0.01,\n             border.col = \"black\",\n             border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(9, 16))\n\n\n\n\n\n\n\n\nCalculate Local Colocation Quotients\nIn order to compute the LCLQ, we first need to prepare the nearest neighbour list, kernel weights, and vector list, as done below:\n\n# Prepare nearest neighbours list\nnb <- include_self(\n  st_knn(st_geometry(wp_sf_osun), 6))\n\n# Compute kernel weights\nwt <- st_kernel_weights(nb, \n                        wp_sf_osun, \n                        \"gaussian\", \n                        adaptive = TRUE)\n\n\n# Prepare vectors\nFuctional_vector <- wp_sf_osun %>%\n  filter(func_status == \"Functional\")\nA <- Fuctional_vector$func_status\n\nNon_Functional_vector <- wp_sf_osun %>%\n  filter(func_status == \"Non-Functional\")\nB <- Non_Functional_vector$func_status\n\nWith the relevant components prepared, we can now calculate the LCLQ values for each Functional Water Point, complete with the Complete Spatial Randomness Test.\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n\nIn order to plot these values, we then join the output of the LCLQ through cbind().\n\nLCLQ_osun <- cbind(wp_sf_osun, LCLQ)\n\nWe can now plot the LCLQ values for analysis, with statistically significant LCLQ values that have a p-value of less than 0.05 highlighted in red:\n\ntmap_mode(\"view\")\nosun_LCLQ_map <- tm_shape(osun) +\n  tm_polygons() +\ntm_shape(LCLQ_osun)+ \n  tm_dots(col = \"Non.Functional\",\n             size = 0.02,\n             border.col = \"black\",\n             border.lwd = 0.5,\n             alpha=0.5,\n             palette=c(\"red\", \"grey\")) +\n  tm_view(set.zoom.limits = c(9, 16))\n\nosun_LCLQ_map"
  },
  {
    "objectID": "Take-home_Exercise/TH1/TH_Ex1.html#conclusion",
    "href": "Take-home_Exercise/TH1/TH_Ex1.html#conclusion",
    "title": "Take-Home Exercise 1: Application of Spatial Point Pattern Analysis on Osun State, Nigeria",
    "section": "Conclusion",
    "text": "Conclusion\n\ntmap_mode(\"plot\")\nosun_LCLQ_map + \n  tm_shape(osun) +\n  tm_borders() +\n  tm_text(\"ADM2_EN\", size = 0.6) \n\n\n\n\nFrom this analysis, we can see that there indeed there is indeed some correlation between the location of Functional and Non-Functional water points in certain LGAs in Osun, most notably Boluwaduro, Boripe, Egbedore, Ede North, Ede South, Alyedire, Alyedade, Atakumosa West, and Atakumosa East, where the highlighted points are concentrated.\nUpon examining the data more closely, it is observed that all the statistically significant points from the Complete Spatial Randomness Test, as highlighted in red, all have a Local Colocation Quotient of <1. Thus, for these points, we can reject the null hypothesis, and conclude that these Functional Water Points are indeed co-located with their surrounding Non-Functional Water Points with a 95% confidence. As for the nature of this correlation, from the LCLQ of <1, we can say that these Functional Water Points are less likely to have Non-Functional Water points in their neighbourhood. We can therefore infer that the LGA listed above, which have the majority of highlighted points, have a less than proportional number of Non-Functional Water Points for each Functional Water Point."
  },
  {
    "objectID": "Hands-on_Exercise/Wk3/HOE_Wk3.html",
    "href": "Hands-on_Exercise/Wk3/HOE_Wk3.html",
    "title": "Hands-On Exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Wk3/HOE_Wk3.html#import-the-data",
    "href": "Hands-on_Exercise/Wk3/HOE_Wk3.html#import-the-data",
    "title": "Hands-On Exercise 3",
    "section": "Import the Data",
    "text": "Import the Data\n\nGeospatial\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk3/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nAspatial\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Exercise/Wk3/HOE_Wk3.html#data-preparation",
    "href": "Hands-on_Exercise/Wk3/HOE_Wk3.html#data-preparation",
    "title": "Hands-On Exercise 3",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Prep data table with vars PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n# .to_upper\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = toupper) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\n# join datasets with left_join\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Exercise/Wk3/HOE_Wk3.html#choropleth-maps",
    "href": "Hands-on_Exercise/Wk3/HOE_Wk3.html#choropleth-maps",
    "title": "Hands-On Exercise 3",
    "section": "Choropleth Maps",
    "text": "Choropleth Maps\n\n# quick basic plot (cartographic standard choropleth)\ntmap_mode(\"plot\") # to plot static map\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\") # map the attribute \"DEPENDENCY\"\n\n\n\n\n\n# higher quality cartographic choropleth (details in later blocks)\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n# Draw base map\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n# Map a specific var\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n# fill only\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n# fill + border (same effect as polygon, but can customise)\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(\"pink\", lwd = 0.8,  alpha = 1) # alpha = opacity\n\n\n\n# lwd = border line, col = border color, lty = border line type\n\n\n# classification methods: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks\n\n# normalised\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n# intervals btwn classes are even\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n# each class same num of samples\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n# get descriptive stats\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\n# custom breaks based on stats\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n# ColourBrewer palette\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n# - in front reverses order(e.g. from light to dark => from dark to light)\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n# add legends\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n# change map style\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n# add compass & scalebar & grid\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) + # add compass\n  tm_scale_bar(width = 0.15) + # add scale bar\n  tm_grid(lwd = 0.1, alpha = 0.2) + # add grid\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\")) +\n  tmap_style(\"white\")\n\n\n\n\n\n# Drawing multiple Choropleth maps\n# Method 1: assign mult vals to asthetic args\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"), # multiple vals\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n# Method 2: define group-by variable in tm_facets()\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.units=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n# Method 3: mult stand-alone maps with tmap_arrange()\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n# Adding selection criterion\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#spatial-data-wrangling",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#spatial-data-wrangling",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "Spatial Data Wrangling",
    "text": "Spatial Data Wrangling\n\n# Import childcare spatial data\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk4/data/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n# Import coastal spatial data\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk4/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\n# Import ura spatial data\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk4/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nAssign correct CRS\n\nsg_sf <- st_transform(sg_sf, 3414)\nst_geometry(sg_sf)\n\nGeometry set for 60 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\nmpsz_sf <- st_transform(mpsz_sf, 3414)\nst_geometry(mpsz_sf)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\nst_geometry(childcare_sf)\n\nGeometry set for 1545 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nAll data is now in SVY21."
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#mapping",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#mapping",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "Mapping",
    "text": "Mapping\n\n# Static map of chilcares\ntmap_mode(\"plot\")\ntm_shape(mpsz_sf) +\n  tm_polygons() +\n  tm_shape(childcare_sf) +\n  tm_dots(size = 0.002)\n\n\n\n\n\n# Interactive Map\ntmap_mode('view')\ntm_basemap(\"OpenStreetMap\")+\n  tm_view(set.zoom.limits=c(11, 16)) +\n  tm_shape(childcare_sf)+\n  tm_dots(alpha=0.5)\n\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#geospatial-data-wrangling",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\n# Convert sf data to sp spatial class\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\n# Display info\nlist(childcare)\n\n[[1]]\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\nlist(mpsz)\n\n[[1]]\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\nlist(sg)\n\n[[1]]\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n# Convert to generic sp object\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n# convert to spatstat's ppp format\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\n# statistics\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n# check for duplicated points (warning also appears in summary)\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\n\n# find number of duiplicated points\n# multiplicity() shows all points\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\n\n# observe duplicated points (higher opacity spots on the map)\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nMethods of Removing duplicate points\n#1: Delete duplicated points => but removes useful data\n\n#2: Jittering: add small perturbation so duplicate points are not in same place\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n#3: Make each point unique, then attached duplicates as marks (attributes of the points) => needs analytical techniques to take into account marks\n\n\nCreating owin object\nUsed to create a geographical area to confine analysis within\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n# Combining point events with owin\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#kernel-density-estimation",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#kernel-density-estimation",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\n# bw.diggle = automatic bandwith selection. can also use bw.CvL(), bw.scott(), bw.ppl()\n# kernel = smooting kernel/selected smoothing method (others: epanechnikov, quartic, disc)\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n# Retrieve the bandwith used to computer kde layer\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n# Rescaling KDE values (convert unit of measurement)\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\nOther bandwidth calc methods:\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\n# Compare outputs of bw.diggle vs bw.ppl\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n# Different kernel methods\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#fixed-adaptive-kde",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#fixed-adaptive-kde",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "Fixed & Adaptive KDE",
    "text": "Fixed & Adaptive KDE\n\n# Compute KDE with bw of 600m (sigma=0.6)\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n# KDE with adaptive bandwith\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n# Compared fixed vs adaptive\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n# KDE output into grid\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n# grid to raster\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\n\n# include crs info into raster\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\n\n# visualise output\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\nComparing spatial point patterns using KDE\n\n# Extract areas for analysis\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\n# plot\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n# convert to sp\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n# convert to owin\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n# extract childcare in regions\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\n# rescale to transform unit of measurement\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\n# Plot\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n# computer KDE\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n# compute fixed bandwith KDE\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#nearest-neighbour-analysis",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#nearest-neighbour-analysis",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\n\n# Clark-Evans test of aggregation\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\n# C-E test for CCK\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.97764, p-value = 0.254\nalternative hypothesis: two-sided\n\n\n\n# C-E test for Tamp\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.79844, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#g-function",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#g-function",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "G Function",
    "text": "G Function\n\n# Compute G-function using Gest() \nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n# Monte Carlo test with G-function\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n# Compute G-func for Tamp\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n# Monte-Carole Test: Hypo test for random distribution in Tamp (H0=rand, H1=not rand)\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#f-function",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#f-function",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "F Function",
    "text": "F Function\n\n# Compute F-func on CCK\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n# Monte-Carole Test: Hypo testing for randomness (H0=rand, H1=not rand)\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\n# Plot results => lies within envelope, so insufficient evidence to reject null hypo, therefore is random\nplot(F_CK.csr)\n\n\n\n\n\n# Compute F func for tamp\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n# Monte Carlo test for tamp\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#k-function",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#k-function",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "K Function",
    "text": "K Function\n\n# Calc k func for cck\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n# Monte Carlo test for cck\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n# K func for tamp\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Exercise/Wk4/HOE_Wk4.html#l-function",
    "href": "Hands-on_Exercise/Wk4/HOE_Wk4.html#l-function",
    "title": "In-Class Exercise 4: Spatial Point Patterns Analysis",
    "section": "L Function",
    "text": "L Function\n\n# L func for cck\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n# L func for cck\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Exercise/Wk2/HOE_Wk2.html",
    "href": "Hands-on_Exercise/Wk2/HOE_Wk2.html",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "Week 2 Hands-on Exercise\n\npacman::p_load(sf, tidyverse)\n\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImport polyline feature data as shapefile\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/Hands-on_Exercise/Wk2/data/geospatial/preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n# Retrive geometry list-col\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n# Display associated attribute info\n# Reveals data type of each field\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nPlot, will plot up to a reasonable max by default (in this case 9)\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nPlot out only the geometry\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlot out specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n# assign correct EPSG code\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_geometry(mpsz3414)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (37): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (7): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing_url    scrap…¹ last_scr…² source name  descr…³ neigh…⁴ pictu…⁵\n    <dbl> <chr>            <dbl> <date>     <chr>  <chr> <chr>   <chr>   <chr>  \n 1  50646 https://www.a… 2.02e13 2022-09-23 previ… Plea… Fully … The se… https:…\n 2  71609 https://www.a… 2.02e13 2022-09-22 city … Ensu… For 3 … <NA>    https:…\n 3  71896 https://www.a… 2.02e13 2022-09-22 city … B&B … <b>The… <NA>    https:…\n 4  71903 https://www.a… 2.02e13 2022-09-22 city … Room… Like y… Quiet … https:…\n 5 275344 https://www.a… 2.02e13 2022-09-22 city … 15 m… Lovely… Bus st… https:…\n 6 289234 https://www.a… 2.02e13 2022-09-22 city … Book… This w… A quie… https:…\n 7 294281 https://www.a… 2.02e13 2022-09-22 city … 5 mi… I have… <NA>    https:…\n 8 324945 https://www.a… 2.02e13 2022-09-22 city … Cozy… <b>The… <NA>    https:…\n 9 330089 https://www.a… 2.02e13 2022-09-22 city … Cozy… A unit… <NA>    https:…\n10 330095 https://www.a… 2.02e13 2022-09-22 city … 10 m… Cosy, … Near I… https:…\n# … with 4,151 more rows, 66 more variables: host_id <dbl>, host_url <chr>,\n#   host_name <chr>, host_since <date>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <lgl>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <dbl>, host_total_listings_count <dbl>,\n#   host_verifications <chr>, host_has_profile_pic <lgl>, …\n\n\n\n# convert df into simple feature df\n# coords arg is c(col name of x coord, col name of y coord)\n# crs arg needs coordinates sys in epsg format\n# %>%  used to nest st_transform() to transform simple feature data frame into svy21 projected coordinates system\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <date> 2022-09-23, 2022-09-22, …\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2010-09-08, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <dbl> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <dbl> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> \"Singapore, Singapore\", N…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <dbl> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <dbl> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <dbl> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <dbl> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <dbl> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <dbl> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <dbl> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <dbl> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <date> 2022-09-23, 2022-09-22, …\n$ number_of_reviews                            <dbl> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <date> 2014-04-18, 2011-12-19, …\n$ last_review                                  <date> 2014-12-26, 2020-01-17, …\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> NA, NA, NA, NA, \"S0399\", …\n$ instant_bookable                             <lgl> FALSE, FALSE, TRUE, FALSE…\n$ calculated_host_listings_count               <dbl> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <dbl> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…\n\n\n\n# Calculate area of cycling paths\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nglimpse(buffer_cycling)\n\nRows: 2,248\nColumns: 3\n$ PLANNING_A <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PLANNING_1 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   <POLYGON [m]> POLYGON ((16004.15 36799.78..., POLYGON ((16013.15 …\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nglimpse(buffer_cycling$AREA)\n\n Units: [m^2] num [1:2248] 186 293 285 145 281 ...\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\n# find numbers of pre-schools in each planning subzone\n# st_intersects indentified schools located inside planning subzones\n# length() calculate num in each zone\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\n# list planning zubzone with most um of pre-school\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\nglimpse(mpsz3414)\n\nRows: 323\nColumns: 17\n$ OBJECTID       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ SUBZONE_NO     <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2,…\n$ SUBZONE_N      <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON…\n$ SUBZONE_C      <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ…\n$ CA_IND         <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", …\n$ PLN_AREA_N     <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MER…\n$ PLN_AREA_C     <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"…\n$ REGION_N       <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"…\n$ REGION_C       <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"…\n$ INC_CRC        <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0…\n$ FMEL_UPD_D     <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-1…\n$ X_ADDR         <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358…\n$ Y_ADDR         <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991…\n$ SHAPE_Leng     <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.…\n$ SHAPE_Area     <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44,…\n$ geometry       <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYG…\n$ `PreSch Count` <int> 0, 5, 0, 4, 2, 10, 4, 2, 6, 1, 6, 2, 0, 1, 6, 0, 0, 0, …\n\n\n\n# Calc density of pre-school by planning subzone\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\nhead(mpsz3414)\n\nSimple feature collection with 6 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            5\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            4\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            2\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           10\n             Area   PreSch Density\n1 1630379.3 [m^2] 0.000000 [1/m^2]\n2  559816.2 [m^2] 8.931502 [1/m^2]\n3  160807.5 [m^2] 0.000000 [1/m^2]\n4  595428.9 [m^2] 6.717847 [1/m^2]\n5  387429.4 [m^2] 5.162230 [1/m^2]\n6 1030378.8 [m^2] 9.705169 [1/m^2]\n\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Website Description"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "In-class_Exercise/Wk3/ICE_Wk3.html",
    "href": "In-class_Exercise/Wk3/ICE_Wk3.html",
    "title": "In-Class Exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Exercise/Wk3/ICE_Wk3.html#load-data",
    "href": "In-class_Exercise/Wk3/ICE_Wk3.html#load-data",
    "title": "In-Class Exercise 3",
    "section": "Load Data",
    "text": "Load Data\n\nNGA_wp = read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Exercise/Wk3/ICE_Wk3.html#plot-choropleth-maps",
    "href": "In-class_Exercise/Wk3/ICE_Wk3.html#plot-choropleth-maps",
    "title": "In-Class Exercise 3",
    "section": "Plot Choropleth Maps",
    "text": "Plot Choropleth Maps\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") + #color scheme\n  tm_borders(lwd = 0.1, #line width\n             alpha = 1) + #opacity/transparency\n  tm_layout(main.title = \"Distribution of functional water points\",\n            legend.outside = FALSE)\n\n\ntmap_style(\"albatross\")\n\n\np1\n\n\n\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") + #color scheme\n  tm_borders(lwd = 0.1, #line width\n             alpha = 1) + #opacity/transparency\n  tm_layout(main.title = \"Distribution of functional water points\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow=1)\n\n\n\n\n\n# Add cols for percentile values for functional and nonfunctional WPs\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "In-class_Exercise/Wk3/ICE_Wk3.html#extreme-value-maps",
    "href": "In-class_Exercise/Wk3/ICE_Wk3.html#extreme-value-maps",
    "title": "In-Class Exercise 3",
    "section": "Extreme Value Maps",
    "text": "Extreme Value Maps\n\nPercentile map: special type of quantile map\nCreate a classification scheme (including of beginning and end)\n\n# Exclusde NA records\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\n\n# Create custom classification & extracting vals\npercent <- c(0, .01, .1, .5, .9, .99, 1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL) #drop away all the geometric fields\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\nExtract map plotting into a reusable function\n\n# function: extract a variable (vname) as a vector\n# out of a s.f. dataframe (df)\n# returns vector of values (without a col name\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\") {\n  percent <- c(0, .01, .1, .5, .9, .99, 1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n    tm_polygons() +\n    tm_shape(df) +\n    tm_fill(vnam,\n            title=legtitle,\n            breaks=bperc,\n            palette=\"Blues\",\n            labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \">99%\")) +\n  tm_borders() +\n    tm_layout(main.title = mtitle,\n              title.position = c(\"right\", \"bottom\"),\n              legend.outside = TRUE)\n}\n\n\npercentmap (\"pct_functional\", NGA_wp)"
  },
  {
    "objectID": "In-class_Exercise/Wk3/ICE_Wk3.html#boxplot",
    "href": "In-class_Exercise/Wk3/ICE_Wk3.html#boxplot",
    "title": "In-Class Exercise 3",
    "section": "BoxPlot",
    "text": "BoxPlot\n\nggplot(data = NGA_wp, aes(x=\"\", y=wp_nonfunctional)) +\n  geom_boxplot()"
  },
  {
    "objectID": "In-class_Exercise/Wk3/ICE_Wk3.html#boxmap",
    "href": "In-class_Exercise/Wk3/ICE_Wk3.html#boxmap",
    "title": "In-Class Exercise 3",
    "section": "BoxMap",
    "text": "BoxMap\n\n# Creates break points for box map\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n# Function to create Boxmap\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\n\n\n\n\n# Recode LGAs with 0 wp to NA\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  },
  {
    "objectID": "In-class_Exercise/Wk5/ICE_Wk5.html",
    "href": "In-class_Exercise/Wk5/ICE_Wk5.html",
    "title": "In-Class Exercise 5: Advanced Spatial Point Patterns Analysis",
    "section": "",
    "text": "# sfdep => for working with sf\n# will be using colocation quotients (CLQs), focusing on local (theres also global and pairwise)\npacman::p_load(sf, tmap, tidyverse, sfdep)"
  },
  {
    "objectID": "In-class_Exercise/Wk5/ICE_Wk5.html#visualise-the-layers",
    "href": "In-class_Exercise/Wk5/ICE_Wk5.html#visualise-the-layers",
    "title": "In-Class Exercise 5: Advanced Spatial Point Patterns Analysis",
    "section": "Visualise the layers",
    "text": "Visualise the layers\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons()+ #always plot polygon before line\n  tm_shape(stores)+\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12, 16))"
  },
  {
    "objectID": "In-class_Exercise/Wk5/data/study_area.html",
    "href": "In-class_Exercise/Wk5/data/study_area.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Exercise/Wk5/data/stores.html",
    "href": "In-class_Exercise/Wk5/data/stores.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html",
    "title": "In-Class Exercise 2",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, funModeling)"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#import-geospatial-data",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#import-geospatial-data",
    "title": "In-Class Exercise 2",
    "section": "Import Geospatial Data",
    "text": "Import Geospatial Data\n\nGeoBoundaries data set\n\ngeoNGA = st_read(dsn = \"data/geospatial\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/In-class_Exercise/Wk2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nhead(geoNGA, n=3)\n\nSimple feature collection with 3 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 538408.1 ymin: 116360.7 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n  shapeName Level                    shapeID shapeGroup shapeType\n1 Aba North  ADM2 NGA-ADM2-72505758B79815894        NGA      ADM2\n2 Aba South  ADM2 NGA-ADM2-72505758B67905963        NGA      ADM2\n3    Abadam  ADM2 NGA-ADM2-72505758B57073987        NGA      ADM2\n                        geometry\n1 MULTIPOLYGON (((548795.5 11...\n2 MULTIPOLYGON (((541412.3 12...\n3 MULTIPOLYGON (((1248985 104...\n\n\n\n\nNGA data set\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2\") %>%\n  st_transform(crs = 26392) # transform to PCS of Nigeria\n\nReading layer `nga_admbnda_adm2' from data source \n  `/Users/michelle/Desktop/IS415/shelle-mim/IS415-GAA/In-class_Exercise/Wk2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nhead(NGA, n=3)\n\nSimple feature collection with 3 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 538408.1 ymin: 116360.7 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n  Shape_Leng  Shape_Area   ADM2_EN ADM2_PCODE  ADM2_REF ADM2ALT1EN ADM2ALT2EN\n1  0.2370744 0.001523921 Aba North   NG001001 Aba North       <NA>       <NA>\n2  0.2624772 0.003531104 Aba South   NG001002 Aba South       <NA>       <NA>\n3  3.0753158 0.326867840    Abadam   NG008001    Abadam       <NA>       <NA>\n  ADM1_EN ADM1_PCODE ADM0_EN ADM0_PCODE       date    validOn validTo\n1    Abia      NG001 Nigeria         NG 2016-11-29 2019-04-17    <NA>\n2    Abia      NG001 Nigeria         NG 2016-11-29 2019-04-17    <NA>\n3   Borno      NG008 Nigeria         NG 2016-11-29 2019-04-17    <NA>\n        SD_EN SD_PCODE                       geometry\n1  Abia South  NG00103 MULTIPOLYGON (((548795.5 11...\n2  Abia South  NG00103 MULTIPOLYGON (((547286.1 11...\n3 Borno North  NG00802 MULTIPOLYGON (((1248985 104..."
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#import-aspatial-data",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#import-aspatial-data",
    "title": "In-Class Exercise 2",
    "section": "Import Aspatial Data",
    "text": "Import Aspatial Data\n\nwp_nga <- read_csv(\"data/aspatial/WPDEx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\") #remove irrelavent data, keep the data small\n\n\n# Write to RDS format\nsaveRDS(wp_nga, file = \"data/aspatial/wpa_nga.rds\")"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#convert-aspatial-to-geospatial",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#convert-aspatial-to-geospatial",
    "title": "In-Class Exercise 2",
    "section": "Convert Aspatial to Geospatial",
    "text": "Convert Aspatial to Geospatial\n\n# use log and lat to make georeference col\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nhead(wp_nga)\n\n# A tibble: 6 × 71\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 429068 GRID3      7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n2 222071 Federa…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan… Mechan…\n3 160612 WaterA…    6.49    7.93 12/04/… Yes     Boreho… Well    Hand P… Hand P…\n4 160669 WaterA…    6.73    7.65 12/04/… Yes     Boreho… Well    <NA>    <NA>   \n5 160642 WaterA…    6.78    7.66 12/04/… Yes     Boreho… Well    Hand P… Hand P…\n6 160628 WaterA…    6.96    7.78 12/04/… Yes     Boreho… Well    Hand P… Hand P…\n# … with 61 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#projection-transformation",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#projection-transformation",
    "title": "In-Class Exercise 2",
    "section": "Projection Transformation",
    "text": "Projection Transformation\n\n# Transform to appropriate projected coordinate system of Nigeria\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#data-cleaning",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#data-cleaning",
    "title": "In-Class Exercise 2",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\nSelect relavent cols\n\nNGA <- NGA %>%\n  select(c(3:4, 8:9)) # c => column, select cols 3-4 and 8-9\n\n\n\nCheck for duplicate name\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n=> shows LGAs with the same name\n\nduplicated_LGA <- NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\nduplicated_indices <- which(NGA$ADM2_EN %in% duplicated_LGA)\n\nfor (ind in duplicated_indices) {\n  NGA$ADM2_EN[ind] <- paste(NGA$ADM2_EN[ind], NGA$ADM1_EN[ind], sep=\", \")\n}"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#derive-proportion-of-functional-non-functional-water-points",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#derive-proportion-of-functional-non-functional-water-points",
    "title": "In-Class Exercise 2",
    "section": "Derive Proportion of Functional & Non Functional Water Points",
    "text": "Derive Proportion of Functional & Non Functional Water Points\n\n# Get different status of water points\nunique(wp_sf$`#status_clean`)\n\n[1] NA                                 \"Functional\"                      \n[3] \"Abandoned/Decommissioned\"         \"Non-Functional\"                  \n[5] \"Functional but not in use\"        \"Functional but needs repair\"     \n[7] \"Abandoned\"                        \"Non functional due to dry season\"\n[9] \"Non-Functional due to dry season\"\n\n\n\n# Get functional & non functional water points\nfunctional <- wp_sf %>% filter(`#status_clean` == \"Functional\") \nWP_Functional <- lengths(st_intersects(geoNGA, functional))\nnon_functional <- wp_sf %>% filter(`#status_clean` == \"Non-Functional\")\nWP_Non_Functional <- lengths(st_intersects(geoNGA, non_functional))\n\n\nglimpse(functional)\n\nRows: 45,883\nColumns: 71\n$ row_id                        <dbl> 222071, 47618, 31962, 48031, 31890, 3347…\n$ `#source`                     <chr> \"Federal Ministry of Water Resources, Ni…\n$ `#lat_deg`                    <dbl> 6.964532, 4.853210, 4.670585, 5.550722, …\n$ `#lon_deg`                    <dbl> 3.597668, 6.643272, 7.762312, 6.591315, …\n$ `#report_date`                <chr> \"08/16/2015 12:00:00 AM\", \"02/18/2015 12…\n$ `#status_id`                  <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\"…\n$ `#water_source_clean`         <chr> \"Borehole\", \"Borehole\", \"Borehole\", \"Bor…\n$ `#water_source_category`      <chr> \"Well\", \"Well\", \"Well\", \"Well\", \"Well\", …\n$ `#water_tech_clean`           <chr> \"Mechanized Pump\", \"Mechanized Pump\", \"M…\n$ `#water_tech_category`        <chr> \"Mechanized Pump\", \"Mechanized Pump\", \"M…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#clean_adm1`                 <chr> \"Ogun\", \"Rivers\", \"Akwa Ibom\", \"Rivers\",…\n$ `#clean_adm2`                 <chr> \"Obafemi-Owode\", \"Abua/Odual\", \"Mkpat En…\n$ `#clean_adm3`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#install_year`               <dbl> NA, 2009, 2006, 2008, NA, 2009, NA, NA, …\n$ `#installer`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> \"Other\", NA, \"Community Management\", \"Ot…\n$ `#status_clean`               <chr> \"Functional\", \"Functional\", \"Functional\"…\n$ `#pay`                        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes…\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_value`       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#subjective_quality`         <chr> \"Acceptable quality\", \"Acceptable qualit…\n$ `#activity_id`                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"6FR5XH7X+R37\", \"6FP8VJ3V+78J\", \"6FP9MQC…\n$ `#notes`                      <chr> \"Ajura\", \"Okana Community\", \"IKOT EKOP\",…\n$ `#orig_lnk`                   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#photo_lnk`                  <chr> NA, \"https://akvoflow-55.s3.amazonaws.co…\n$ `#country_id`                 <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 13364.9005, 17385.9136, 4705.3591, 24565…\n$ `#distance_to_secondary_road` <dbl> 48.87743, 18319.56360, 6844.29902, 7300.…\n$ `#distance_to_tertiary_road`  <dbl> 4167.5190683, 225.7018842, 1739.1031788,…\n$ `#distance_to_city`           <dbl> 13898.649, 41824.663, 43866.546, 49536.0…\n$ `#distance_to_town`           <dbl> 9405.7828, 410.1950, 17895.5116, 23861.0…\n$ water_point_history           <chr> \"{\\\"2015-08-16\\\": {\\\"source\\\": \\\"Federal…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> 140, 1481, 3438, 4436, 1436, 621, 11, 53…\n$ local_population_1km          <dbl> 887, 28243, 4568, 9422, 3798, 1110, 6200…\n$ crucialness_score             <dbl> 0.157835400, 0.052437772, 0.752626970, 0…\n$ pressure_score                <dbl> 0.14000000, 1.48100000, 3.43800000, 4.43…\n$ usage_capacity                <dbl> 1000, 1000, 1000, 1000, 1000, 1000, 300,…\n$ is_urban                      <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE,…\n$ days_since_report             <dbl> 2592, 2771, 2796, 2763, 2796, 2804, 2773…\n$ staleness_score               <dbl> 44.17405, 41.75063, 41.42291, 41.85604, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 264633, 219108, 206709, 220770, 206707, …\n$ cluster_size                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\"…\n$ `#country_name`               <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#water_source`               <chr> \"Improved Tube well or borehole\", \"Impro…\n$ `#water_tech`                 <chr> \"Motorised\", \"Motorised\", \"Motorised\", \"…\n$ `#status`                     <chr> \"Functional (and in use)\", \"Functional (…\n$ `#adm2`                       <chr> \"Obafemi-Owode\", \"Abua/Odual\", \"Mkpat En…\n$ `#adm3`                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management`                 <chr> \"Other\", NA, \"Community Management\", \"Ot…\n$ `#adm1`                       <chr> \"Ogun\", \"Rivers\", \"Akwa Ibom\", \"Rivers\",…\n$ `New Georeferenced Column`    <chr> \"POINT (3.5976683 6.9645317)\", \"POINT (6…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(6.9645317°, 3.5976683°)\", \"(4.85321°, …\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> \"#status_id, #water_source, #pay, #statu…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"06/30/2020 12:56:07 PM\", \"06/30/2020 12…\n$ updated_timestamp             <chr> \"06/30/2020 12:56:07 PM\", \"06/30/2020 12…\n$ Geometry                      <POINT [m]> POINT (128394.3 330487.9), POINT (…\n\n\n\nglimpse(non_functional)\n\nRows: 29,385\nColumns: 71\n$ row_id                        <dbl> 221859, 602018, 602013, 602058, 602009, …\n$ `#source`                     <chr> \"Federal Ministry of Water Resources, Ni…\n$ `#lat_deg`                    <dbl> 7.142345, 6.783210, 6.799595, 6.762375, …\n$ `#lon_deg`                    <dbl> 3.375330, 7.604793, 7.615451, 7.659910, …\n$ `#report_date`                <chr> \"08/07/2015 12:00:00 AM\", \"10/15/2020 12…\n$ `#status_id`                  <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",…\n$ `#water_source_clean`         <chr> \"Piped Water\", \"Borehole\", \"Borehole\", \"…\n$ `#water_source_category`      <chr> \"Piped Water\", \"Well\", \"Well\", \"Well\", \"…\n$ `#water_tech_clean`           <chr> NA, \"Hand Pump - India Mark II\", \"Hand P…\n$ `#water_tech_category`        <chr> NA, \"Hand Pump\", \"Hand Pump\", \"Hand Pump…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#clean_adm1`                 <chr> \"Ogun\", \"Enugu\", \"Enugu\", \"Enugu\", \"Enug…\n$ `#clean_adm2`                 <chr> \"Obafemi-Owode\", \"Isi-Uzo\", \"Udenu\", \"Is…\n$ `#clean_adm3`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#install_year`               <dbl> NA, NA, NA, NA, NA, 2009, NA, NA, NA, NA…\n$ `#installer`                  <chr> NA, \"WaterAid\", \"WaterAid\", \"WaterAid\", …\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> \"Direct Government Operation\", NA, NA, N…\n$ `#status_clean`               <chr> \"Non-Functional\", \"Non-Functional\", \"Non…\n$ `#pay`                        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_value`       <dbl> NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA…\n$ `#subjective_quality`         <chr> \"Acceptable quality\", \"Within National s…\n$ `#activity_id`                <chr> NA, \"161354372\", \"161354451\", \"161354231…\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"6FV549RG+W4P\", \"6FR9QJM3+6W2\", \"6FR9QJX…\n$ `#notes`                      <chr> \"Idi Aba\", \"FROM ABAKPA LIBERTY TO UGWUO…\n$ `#orig_lnk`                   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#photo_lnk`                  <chr> \"https://akvoflow-55.s3.amazonaws.com/im…\n$ `#country_id`                 <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 112.94477, 9885.49199, 7724.57691, 6323.…\n$ `#distance_to_secondary_road` <dbl> 2515.7069, 16454.2384, 16639.6899, 20728…\n$ `#distance_to_tertiary_road`  <dbl> 296.968839, 65.299696, 455.864295, 16.19…\n$ `#distance_to_city`           <dbl> 3656.469, 38630.329, 40716.522, 38809.99…\n$ `#distance_to_town`           <dbl> 2795.2586, 24791.2977, 25402.4929, 31303…\n$ water_point_history           <chr> \"{\\\"2015-08-07\\\": {\\\"photo_lnk\\\": \\\"http…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> NA, 3814, 3723, 572, 2489, 320, 1790, 12…\n$ local_population_1km          <dbl> NA, 3880, 7569, 1582, 5032, 677, 15483, …\n$ crucialness_score             <dbl> NA, 0.98298969, 0.49187475, 0.36156764, …\n$ pressure_score                <dbl> NA, 12.7133333, 12.4100000, 1.9066667, 8…\n$ usage_capacity                <dbl> 250, 300, 300, 300, 300, 1000, 1000, 100…\n$ is_urban                      <lgl> TRUE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ days_since_report             <dbl> 2601, 705, 705, 705, 705, 1091, 2687, 26…\n$ staleness_score               <dbl> 44.04891, 80.07349, 80.07349, 80.07349, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 261864, 220059, 220073, 220048, 220055, …\n$ cluster_size                  <dbl> 1, 2, 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\"…\n$ `#country_name`               <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#water_source`               <chr> \"Improved Tube well or borehole\", \"Boreh…\n$ `#water_tech`                 <chr> \"state water pipe\", \"India MKII\", \"India…\n$ `#status`                     <chr> \"Non-functional Technical breakdown\", \"N…\n$ `#adm2`                       <chr> \"Abeokuta South\", \"Isi-Uzo\", \"Isi-Uzo\", …\n$ `#adm3`                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management`                 <chr> \"Direct Government Operation\", NA, NA, N…\n$ `#adm1`                       <chr> \"Ogun\", \"MBU AMON\", \"ONUAFOR MBA AMON\", …\n$ `New Georeferenced Column`    <chr> \"POINT (3.37533 7.142345)\", \"POINT (7.60…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(7.142345°, 3.37533°)\", \"(6.78321019999…\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> \"#status_id, #water_source, #pay, #statu…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"06/30/2020 12:56:07 PM\", \"09/06/2022 05…\n$ updated_timestamp             <chr> \"06/30/2020 12:56:07 PM\", \"09/06/2022 05…\n$ Geometry                      <POINT [m]> POINT (103956.4 350486.9), POINT (…\n\n\nTherefore, proportion is 45,883 (functional) : 29,385 (non functional)"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#combine-geospatial-aspatial-into-simple-feature-data-frame",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#combine-geospatial-aspatial-into-simple-feature-data-frame",
    "title": "In-Class Exercise 2",
    "section": "Combine Geospatial & Aspatial into simple feature data frame",
    "text": "Combine Geospatial & Aspatial into simple feature data frame\n\nWP_Total <- lengths(st_intersects(geoNGA, wp_sf))\n\n# Combine into a tibble\nnga_combined <- tibble(geoNGA, WP_Functional, WP_Total)\nnga_combined <- nga_combined %>%\n  mutate(`WP_Functional_Proportion` = `WP_Functional`/`WP_Total`)\n\n\n# Remove NA values\nnga_combined$`WP_Functional_Proportion`[is.na(nga_combined$`WP_Functional_Proportion`)] = 0\n\n\n# Plot of total water points\nggplot(data=nga_combined, \n       aes(x= as.numeric(`WP_Total`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Distribution of Total Water Points\",\n       x = \"Number of Water Points\",\n       y = \"Number of LGAs\")\n\n\n\n# Plot of functional water points\nggplot(data=nga_combined, \n       aes(x= as.numeric(`WP_Functional`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Distribution of Functional Water Points\",\n       x = \"Number of Functional Water Points\",\n       y = \"Number of LGAs\")\n\n\n\n# Plot of total water points against proportion functional\nggplot(data=nga_combined, \n       aes(y = `WP_Total`, \n           x= as.numeric(`WP_Functional_Proportion`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  labs(title = \"\",\n      x = \"Proportion of Functional Water Points\",\n      y = \"Total Water Points\")"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#data-wrangling",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#data-wrangling",
    "title": "In-Class Exercise 2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nfreq(data = wp_sf, input='#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nwp_sf_nga <- wp_sf %>%\n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"\n  ))\n\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nwp_unknown <- wp_sf_nga %>% filter(`status_clean` %in% \n                                     c(\"unknown\"))\n\n\nwp_functional\n\nSimple feature collection with 52148 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 29322.63 ymin: 33758.37 xmax: 1218553 ymax: 1092629\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 52,148 × 2\n   status_clean            Geometry\n * <chr>                <POINT [m]>\n 1 Functional   (128394.3 330487.9)\n 2 Functional   (464684.4 94532.59)\n 3 Functional   (588792.3 74102.03)\n 4 Functional     (459153.3 171705)\n 5 Functional   (586703.9 75701.92)\n 6 Functional      (612461.7 87149)\n 7 Functional     (503439 87320.23)\n 8 Functional   (599467.7 92205.82)\n 9 Functional   (651470.8 101586.9)\n10 Functional   (650819.3 104796.9)\n# … with 52,138 more rows\n\n\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga)\n  )) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional)\n  )) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional)\n  )) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)\n  ))\n\n\nglimpse(NGA)\n\nRows: 774\nColumns: 5\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((548795.5 11..., MULTIPOLYGON (…\n\n\n\nglimpse(NGA_wp)\n\nRows: 774\nColumns: 9\n$ ADM2_EN          <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", …\n$ ADM2_PCODE       <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG00…\n$ ADM1_EN          <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\",…\n$ ADM1_PCODE       <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\",…\n$ geometry         <MULTIPOLYGON [m]> MULTIPOLYGON (((548795.5 11..., MULTIPOL…\n$ total_wp         <int> 17, 71, 0, 57, 48, 233, 34, 119, 152, 66, 39, 135, 63…\n$ wp_functional    <int> 7, 29, 0, 23, 23, 82, 16, 72, 79, 18, 25, 54, 28, 55,…\n$ wp_nonfunctional <int> 9, 35, 0, 34, 25, 42, 15, 33, 62, 26, 13, 73, 35, 36,…\n$ wp_unknown       <int> 1, 7, 0, 0, 0, 109, 3, 14, 11, 22, 1, 8, 0, 37, 88, 1…\n\n\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Exercise/Wk2/ICE_Wk2.html#visualization",
    "href": "In-class_Exercise/Wk2/ICE_Wk2.html#visualization",
    "title": "In-Class Exercise 2",
    "section": "Visualization",
    "text": "Visualization\n\nggplot(data=NGA_wp,\n       aes(x=total_wp)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T\n  )),\n  color=\"red\",\n  linetype=\"dashed\",\n  linewidth=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  }
]