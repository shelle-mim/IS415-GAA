---
title: Take-Home Exercise 1
date: "30 Jan 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

# Installing Packages

```{r}
pacman::p_load(sf, tidyverse, funModeling, tmap, maptools, tmap, raster, spatstat)
```

# Importing the Data

## Import Geospatial Data

### **GeoBoundaries data set**

```{r}
geoNGA = st_read(dsn = "data/geospatial",
                  layer = "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

```{r}
head(geoNGA, n=3)
```

### **NGA data set**

```{r}
NGA <- st_read("data/geospatial/",
               layer = "nga_admbnda_adm2") %>%
  st_transform(crs = 26392) # transform to PCS of Nigeria
```

```{r}
head(NGA, n=3)
```

## Import Aspatial Data

```{r}
wp_nga <- read_csv("data/aspatial/WPDEx.csv") %>%
  filter(`#clean_country_name` == "Nigeria") #remove irrelavent data, keep the data small
```

## Convert Aspatial to Geospatial

```{r}
# use log and lat to make georeference col
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
head(wp_nga)
```

```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```

## Projection Transformation

```{r}
# Transform to appropriate projected coordinate system of Nigeria
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

## Data Cleaning

### Select relevant cols

```{r}
# select adm1 and adm2 cols (cols 3-4 and 8-9)
NGA <- NGA %>%
  dplyr::select(c(3:4, 8:9))
```

### Check for and Remove Duplicate Names

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]
```

=\> shows LGAs with the same name

```{r}
duplicated_LGA <- NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]

duplicated_indices <- which(NGA$ADM2_EN %in% duplicated_LGA)

for (ind in duplicated_indices) {
  NGA$ADM2_EN[ind] <- paste(NGA$ADM2_EN[ind], NGA$ADM1_EN[ind], sep=", ")
}
```

## Data Wrangling

```{r}
# Look at distribution of the data
#freq(data = wp_sf, input='#status_clean')
```

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = '#status_clean') %>%
  dplyr::select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"
  ))
```

```{r}
wp_functional_sf <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
wp_nonfunctional_sf <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

```{r}
wp_unknown_sf <- wp_sf_nga %>% filter(`status_clean` %in% 
                                     c("unknown"))
```

```{r}
NGA_wp_sf <- NGA %>%
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga)
  )) %>%
  mutate(`wp_functional_sf` = lengths(
    st_intersects(NGA, wp_functional_sf)
  )) %>%
  mutate(`wp_nonfunctional_sf` = lengths(
    st_intersects(NGA, wp_nonfunctional_sf)
  )) %>%
  mutate(`wp_unknown_sf` = lengths(
    st_intersects(NGA, wp_unknown_sf)
  ))
```

```{r}
glimpse(NGA)
```

```{r}
osun <- NGA %>%
  filter(ADM1_EN %in%
           c("Osun"))
qtm(osun)
```

```{r}
glimpse(NGA_wp_sf)
```

```{r}
write_rds(NGA_wp_sf, "data/rds/NGA_wp_sf.rds")
```

# Exploratory Spatial Data Analysis

## Derive Kernel Density Maps

### Conversion to ppp data type

```{r}
# Convert sf to sp's spatial class
wp_functional_spatial <- as_Spatial(wp_functional_sf)
wp_nonfunctional_spatial <- as_Spatial(wp_nonfunctional_sf)
osun_spatial <- as_Spatial(osun)
```

```{r}
wp_functional_spatial
```

```{r}
osun_spatial
```

```{r}
wp_functional_sp <- as(wp_functional_spatial, "SpatialPoints")
wp_nonfunctional_sp <- as(wp_nonfunctional_spatial, "SpatialPoints")
osun_sp <- as(osun_spatial, "SpatialPolygons")
```

```{r}
wp_functional_sp
```

```{r}
wp_functional_ppp <- as(wp_functional_sp, "ppp")
wp_nonfunctional_ppp <- as(wp_nonfunctional_sp, "ppp")
```

```{r}
wp_functional_ppp
```

```{r}
plot(wp_functional_ppp)
```

### Check for/Deal with duplicated points

```{r}
any(duplicated(wp_functional_ppp))
```

```{r}
any(duplicated(wp_nonfunctional_ppp))
```

Since there are no duplicated points, no further action needed.

### Create Owin of Osun

Create Owin to bound data within

```{r}
osun_owin <- as(osun_sp, "owin")
```

```{r}
plot(osun_owin)
```

```{r}
wp_functional_osun_ppp = wp_functional_ppp[osun_owin]
wp_nonfunctional_osun_ppp = wp_nonfunctional_ppp[osun_owin]
```

```{r}
plot(wp_functional_osun_ppp)
```

```{r}
plot(wp_nonfunctional_osun_ppp)
```

### Kernel Density Estimation

```{r}
# Convert to km
wp_func_osun_ppp_km <- rescale(wp_functional_osun_ppp, 1000, "km")
wp_nonfunc_osun_ppp_km <- rescale(wp_nonfunctional_osun_ppp, 1000, "km")
```

```{r}
# Choosing automatic bandwith method
par(mfrow=c(2,2))
plot(density(wp_func_osun_ppp_km,
             sigma=bw.CvL,
             edge=TRUE,
             kernel="gaussian"))
plot(density(wp_func_osun_ppp_km,
             sigma=bw.scott,
             edge=TRUE,
             kernel="gaussian"))
plot(density(wp_func_osun_ppp_km,
             sigma=bw.diggle,
             edge=TRUE,
             kernel="gaussian"))
plot(density(wp_func_osun_ppp_km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="gaussian"))
```

Will choose bw.ppl, since we appear to be working with predominately tight clusters, and bw.ppl and bw.diggle give more appropriate values when such is the case. I chose bw.ppl as it shows up better than bw.diggle, which is slightly difficult to see.

```{r}
# Choosing kernel method
par(mfrow=c(2,2))
plot(density(wp_func_osun_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(wp_func_osun_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(wp_func_osun_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(wp_func_osun_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

Since there are no significant differences observed across different kernels, we will use guassian kernel, the default kernel method.

```{r}
par(mfrow=c(1,2))
# Try adaptive bandwith
# each datapoint have its own threshold => tends to be more pixelised
plot( adaptive.density(wp_func_osun_ppp_km, method="voronoi"))

# define diff num of neighbour you want, and calc distance until converge => tends to be smoother
plot( adaptive.density(wp_func_osun_ppp_km, method="kernel"))
```

Adaptive also does not give good results, so will use fixed with bw.ppl and guassian kernel.

```{r}
kde_wp_func_bw_ppl <- density(wp_func_osun_ppp_km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
kde_wp_nonfunc_bw_ppl <- density(wp_nonfunc_osun_ppp_km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
```

### Final Kernel Density Estimation Maps

```{r}
par(mfrow=c(1,2))
plot(kde_wp_func_bw_ppl)
plot(kde_wp_nonfunc_bw_ppl)
```

## Display KDE Maps on OpenStreetMap

### Convert to raster for tmap display

```{r}
# Convert to Gridded, then to raster
gridded_kde_wp_func_bw_ppl <- as.SpatialGridDataFrame.im(kde_wp_func_bw_ppl)
gridded_kde_wp_nonfunc_bw_ppl <- as.SpatialGridDataFrame.im(kde_wp_nonfunc_bw_ppl)

raster_kde_wp_func_bw_ppl <- raster(gridded_kde_wp_func_bw_ppl)
raster_kde_wp_nonfunc_bw_ppl <- raster(gridded_kde_wp_nonfunc_bw_ppl)

# Assign CRS info
projection(raster_kde_wp_func_bw_ppl) <- CRS("+init=EPSG:26392 +units=km")
projection(raster_kde_wp_nonfunc_bw_ppl) <- CRS("+init=EPSG:26392 +units=km")

raster_kde_wp_func_bw_ppl
```

### Display on tmap OpenStreetMap

```{r}
tmap_mode('view')

#func_kde <- 
tm_basemap("OpenStreetMap")+
  tm_view(set.zoom.limits=c(9, 16)) +
  tm_shape(raster_kde_wp_func_bw_ppl) + 
  tm_raster("v", palette="YlOrRd") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)

#nonfunc_kde <- 
tm_basemap("OpenStreetMap")+
  tm_view(set.zoom.limits=c(9, 16)) +
  tm_shape(raster_kde_wp_nonfunc_bw_ppl) + 
  tm_raster("v", palette="YlOrRd") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)

# tmap_arrange(func_kde, nonfunc_kde, asp=1, ncol=2)
```

## Describe Spatial Patterns

nigeria no water :(

# Second-order Spatial Point Pattern Analysis

```{r}
```
